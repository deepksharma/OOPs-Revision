package leetcode;/*
LeetCode Problem: 389. Find the Difference
Link: https://leetcode.com/problems/find-the-difference/

----------------------------------------------------
üìù Problem Statement:
You are given two strings s and t.
String t is generated by random shuffling string s and then adding one more letter at a random position.
Return the letter that was added to t.

Example 1:
Input: s = "abcd", t = "abcde"
Output: "e"

Example 2:
Input: s = "", t = "y"
Output: "y"

----------------------------------------------------
ü§î Intuition:
- Since `t` is formed by shuffling `s` and adding one extra character,
  the difference between them is exactly **one character**.
- We need to identify that character efficiently.

----------------------------------------------------
üí≠ Thought Process (How to Approach):
1. HashMap Counting:
   - Count frequency of each character in `s`.
   - Decrease frequency while iterating `t`.
   - The character with mismatch is the extra one.
   - Simple and intuitive.

2. Sum of ASCII Values:
   - Convert chars to ASCII values.
   - Sum of `t` - Sum of `s` = extra character‚Äôs ASCII value.
   - Elegant math trick.

3. XOR Trick (Most Optimized):
   - XOR cancels out identical characters (a^a=0).
   - XOR of all chars in `s` and `t` will cancel pairs and
     leave only the extra character.
   - Extremely efficient.

----------------------------------------------------
üßÆ Dry Run (Using XOR approach):
s = "abcd", t = "abcde"

Step 1: XOR all in s: ('a' ^ 'b' ^ 'c' ^ 'd')
Step 2: XOR with t: (previous result ^ 'a' ^ 'b' ^ 'c' ^ 'd' ^ 'e')

All duplicates cancel: a^a=0, b^b=0, c^c=0, d^d=0
Remaining = 'e'

Answer = 'e'

----------------------------------------------------
‚è±Ô∏è Time & Space Complexity:
1. HashMap:
   - Time: O(n)
   - Space: O(26) = O(1) (since only lowercase letters)

2. Sum of ASCII:
   - Time: O(n)
   - Space: O(1)

3. XOR Trick:
   - Time: O(n)
   - Space: O(1) ‚úÖ Most optimized

----------------------------------------------------
üí° Different Solutions:
*/

import java.util.HashMap;
import java.util.Map;

class LeetCode389_FindDifference {

    // 1Ô∏è‚É£ HashMap Counting Approach
    public char findTheDifference_HashMap(String s, String t) {
        Map<Character, Integer> map = new HashMap<>();
        for (char c : s.toCharArray()) {
            map.put(c, map.getOrDefault(c, 0) + 1);
        }
        for (char c : t.toCharArray()) {
            if (!map.containsKey(c) || map.get(c) == 0) {
                return c; // extra char
            }
            map.put(c, map.get(c) - 1);
        }
        return ' '; // never reaches
    }

    // 2Ô∏è‚É£ Sum of ASCII Values Approach
    public char findTheDifference_Sum(String s, String t) {
        int sum = 0;
        for (char c : t.toCharArray()) sum += c;
        for (char c : s.toCharArray()) sum -= c;
        return (char)sum;
    }

    // 3Ô∏è‚É£ XOR Approach (Optimized)
    public char findTheDifference_XOR(String s, String t) {
        char result = 0;
        for (char c : s.toCharArray()) result ^= c;
        for (char c : t.toCharArray()) result ^= c;
        return result;
    }

    // ‚úÖ Main Method for Testing
    public static void main(String[] args) {
        LeetCode389_FindDifference fd = new LeetCode389_FindDifference();

        String s1 = "abcd", t1 = "abcde";
        System.out.println("HashMap: " + fd.findTheDifference_HashMap(s1, t1));
        System.out.println("Sum: " + fd.findTheDifference_Sum(s1, t1));
        System.out.println("XOR: " + fd.findTheDifference_XOR(s1, t1));

        String s2 = "", t2 = "y";
        System.out.println("HashMap: " + fd.findTheDifference_HashMap(s2, t2));
        System.out.println("Sum: " + fd.findTheDifference_Sum(s2, t2));
        System.out.println("XOR: " + fd.findTheDifference_XOR(s2, t2));
    }
}
