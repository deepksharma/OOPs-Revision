package collectionFrameWork;

/*
======================================================
                JAVA COLLECTIONS - QUEUE
======================================================
‚úÖ Interface in java.util package
‚úÖ Follows FIFO (First-In-First-Out) principle (mostly)
‚úÖ Implementations: LinkedList, PriorityQueue, ArrayDeque
‚úÖ Can allow duplicates and null (depends on implementation)
‚úÖ Used when order of processing is important (e.g., task scheduling, buffering)

------------------------------------------------------
üìå Queue Interface Key Implementations:
------------------------------------------------------
1. LinkedList    ‚Üí Can work as Queue, Deque, List
2. PriorityQueue ‚Üí Orders elements based on natural order or comparator
3. ArrayDeque    ‚Üí Faster than LinkedList for queue operations (no capacity limit)

------------------------------------------------------
üìå IMPORTANT METHODS (Queue Interface)
------------------------------------------------------
1. boolean add(E e)      ‚Üí Inserts element, throws exception if fails
2. boolean offer(E e)    ‚Üí Inserts element, returns false if fails
3. E remove()            ‚Üí Removes head, throws exception if empty
4. E poll()              ‚Üí Removes head, returns null if empty
5. E element()           ‚Üí Retrieves head, throws exception if empty
6. E peek()              ‚Üí Retrieves head, returns null if empty
======================================================
*/

import java.util.*;

public class QueueDemo {
    public static void main(String[] args) {
        // Using LinkedList as Queue
        Queue<String> queue = new LinkedList<>();

        // Add elements
        queue.add("A");
        queue.add("B");
        queue.offer("C"); // Doesn't throw exception if fails

        // View head element
        System.out.println("Head: " + queue.peek()); // A

        // Remove head
        System.out.println("Removed: " + queue.poll()); // Removes A
        System.out.println("Removed: " + queue.remove()); // Removes B

        // Remaining elements
        System.out.println("Queue: " + queue);

        // PriorityQueue Example
        Queue<Integer> pq = new PriorityQueue<>();
        pq.offer(30);
        pq.offer(10);
        pq.offer(20);

        System.out.println("PriorityQueue (natural order): " + pq);
    }
}

/*
======================================================
üí° NOTES & BEST PRACTICES:
======================================================
1Ô∏è‚É£ Use **offer()** instead of add() in production to avoid exceptions when capacity is full.
2Ô∏è‚É£ **poll()** is safer than remove() as it returns null instead of throwing exception.
3Ô∏è‚É£ For **thread-safe queues**, use:
   - ConcurrentLinkedQueue
   - PriorityBlockingQueue
4Ô∏è‚É£ **PriorityQueue** does NOT maintain insertion order, it sorts elements.
5Ô∏è‚É£ **Null elements** are NOT allowed in PriorityQueue.
6Ô∏è‚É£ **LinkedList Queue** allows null values.
======================================================
*/
